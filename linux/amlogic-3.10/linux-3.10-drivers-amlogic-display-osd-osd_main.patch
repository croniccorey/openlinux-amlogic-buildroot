--- arm-src-kernel-2014-06-18-155d61a24e/drivers/amlogic/display/osd/osd_main.c.orig	2014-06-18 15:48:08.599157689 +0800
+++ arm-src-kernel-2014-06-18-155d61a24e/drivers/amlogic/display/osd/osd_main.c	2014-06-18 15:50:35.483160451 +0800
@@ -96,7 +96,11 @@ _find_color_format(struct fb_var_screeni
 		lower_margin=COLOR_INDEX_24_6666_A;
 		break;		
 		case 3:
+#ifdef CONFIG_FB_AMLOGIC_UMP
+        upper_margin=COLOR_INDEX_32_ARGB;
+#else
 		upper_margin=COLOR_INDEX_32_ABGR;
+#endif
 		lower_margin=COLOR_INDEX_32_BGRA;
 		break;
 		case 4:
@@ -267,6 +271,12 @@ osd_setcmap(struct fb_cmap *cmap, struct
 	return 0;
 }
 
+#ifdef CONFIG_FB_AMLOGIC_UMP
+int (*disp_get_ump_secure_id) (struct fb_info *info, myfb_dev_t *g_fbi,
+					unsigned long arg, int buf);
+EXPORT_SYMBOL(disp_get_ump_secure_id);
+#endif
+
 static int
 osd_ioctl(struct fb_info *info, unsigned int cmd,
                unsigned long arg)
@@ -284,6 +294,11 @@ osd_ioctl(struct fb_info *info, unsigned
         unsigned long  ret;
 	 u32  flush_rate;
 
+	unsigned int karg = 0;
+#ifdef CONFIG_FB_AMLOGIC_UMP
+	int secure_id_buf_num = 0;
+#endif
+
     	switch (cmd)
   	{
    		case  FBIOPUT_OSD_SRCKEY_ENABLE:
@@ -328,6 +343,44 @@ osd_ioctl(struct fb_info *info, unsigned
 		case FBIOPUT_OSD_WINDOW_AXIS:
 			ret=copy_from_user(&osd_dst_axis, argp, 4 * sizeof(s32));
 			break;
+#ifdef CONFIG_FB_AMLOGIC_UMP
+		case GET_UMP_SECURE_ID_BUF2:	/* flow trough */
+		{
+			secure_id_buf_num = 1;
+			if (!disp_get_ump_secure_id)
+				request_module("osd_ump");
+			if (disp_get_ump_secure_id)
+				return disp_get_ump_secure_id(info, fbdev, arg,
+							      secure_id_buf_num);
+			else
+				return -ENOTSUPP;
+		}
+		break;
+		case GET_UMP_SECURE_ID_BUF1:	/* flow trough */
+		{
+			secure_id_buf_num = 0;
+			if (!disp_get_ump_secure_id)
+				request_module("osd_ump");
+			if (disp_get_ump_secure_id)
+				return disp_get_ump_secure_id(info, fbdev, arg,
+							      secure_id_buf_num);
+			else
+				return -ENOTSUPP;
+		}
+		break;
+#endif
+		case FBIOPUT_OSD2_CURSOR_DATA:
+		{
+			if (copy_from_user(&karg, argp, sizeof(unsigned int))) {
+				return -EFAULT;
+			}
+			aml_hwc_addr_t para;
+			if (copy_from_user(&para, (void __user *)karg, sizeof(aml_hwc_addr_t))) {
+				return -EFAULT;
+			}
+			ret = osddev_copy_data_tocursor(fbdev, &para);
+		}
+		break;
 		default :
 			amlog_mask_level(LOG_MASK_IOCTL,LOG_LEVEL_HIGH,"command not supported\r\n ");
 			return -1;
